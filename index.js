(function(){
  var backbone, http, express, ejslocals, h, _, util, colors;
  backbone = require('backbone4000');
  http = require('http');
  express = require('express');
  ejslocals = require('ejs-locals');
  h = require('helpers');
  _ = require('underscore');
  util = require('util');
  colors = require('colors');
  exports.lego = backbone.Model.extend4000({
    requires: ['logger'],
    after: ['db'],
    init: function(callback){
      var app, this$ = this;
      this.env.app = app = express();
      this.settings = _.extend({
        'static': h.path(this.env.root, 'static'),
        views: h.path(this.env.root, 'ejs'),
        port: 80,
        log: true
      }, this.settings);
      if (this.settings.log) {
        app.use(function(req, res, next){
          var host, forwarded;
          host = req.socket.remoteAddress;
          if (host === "127.0.0.1") {
            if (forwarded = req.headers['x-forwarded-for']) {
              host = forwarded;
            }
          }
          req.logContext = {
            tags: ['ip-' + host]
          };
          this$.env.log(req.originalUrl + " [" + req.headers['user-agent'] + "]", {
            url: req.originalUrl,
            ip: host,
            headers: req.headers,
            method: req.method
          }, 'http', req.method, "ip-" + host);
          return next();
        });
      }
      if (this.settings.configure) {
        this.settings.configure(app);
      } else {
        app.engine('ejs', ejslocals);
        app.set('view engine', 'ejs');
        app.set('views', this.settings.views);
        app.set('x-powered-by', false);
        app.use(express['static'](this.settings['static'], {
          index: false,
          redirect: false,
          etag: false,
          dotfiles: 'ignore'
        }));
      }
      this.env.http = http.createServer(this.env.app);
      this.env.http.listen(this.settings.port);
      this.env.log('express listening at ' + colors.green(this.settings.port), {}, 'init', 'ok');
      return callback();
    }
  });
}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL2xlc2gvY29kaW5nL2JpdGNvaW4vYm9tYmVyL25vZGVfbW9kdWxlcy9yaWJjYWdlX2V4cHJlc3M0L2luZGV4LmxzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0VBQ0EsUUFBUyxDQUFBLENBQUEsQ0FBRSxRQUFRLGNBQUE7RUFDbkIsSUFBSyxDQUFBLENBQUEsQ0FBRSxRQUFRLE1BQUE7RUFDZixPQUFRLENBQUEsQ0FBQSxDQUFFLFFBQVEsU0FBQTtFQUNsQixTQUFVLENBQUEsQ0FBQSxDQUFFLFFBQVEsWUFBQTtFQUNwQixDQUFFLENBQUEsQ0FBQSxDQUFFLFFBQVEsU0FBQTtFQUNaLENBQUUsQ0FBQSxDQUFBLENBQUUsUUFBUSxZQUFBO0VBQ1osSUFBSyxDQUFBLENBQUEsQ0FBRSxRQUFRLE1BQUE7RUFDZixNQUFPLENBQUEsQ0FBQSxDQUFFLFFBQVEsUUFBQTtFQUVqQixPQUFPLENBQUMsSUFBSyxDQUFBLENBQUEsQ0FBRSxRQUFRLENBQUMsS0FBSyxDQUFDLFdBQzFCO0lBQUEsVUFBVSxDQUFFLFFBQUY7SUFDVixPQUFPLENBQUUsSUFBRjtJQUNQLE1BQU0sUUFBQSxDQUFBLFFBQUE7O01BQ0YsSUFBQyxDQUFBLEdBQUcsQ0FBQyxHQUFJLENBQUEsQ0FBQSxDQUFFLEdBQUksQ0FBQSxDQUFBLENBQUUsUUFBTztNQUN4QixJQUFDLENBQUEsUUFBUyxDQUFBLENBQUEsQ0FBRSxDQUFDLENBQUMsT0FBTztRQUNqQixVQUFRLENBQUMsQ0FBQyxLQUFLLElBQUMsQ0FBQSxHQUFHLENBQUMsTUFBTSxRQUFaO1FBQ2QsT0FBTyxDQUFDLENBQUMsS0FBSyxJQUFDLENBQUEsR0FBRyxDQUFDLE1BQU0sS0FBWjtRQUNiLE1BQU07UUFDTixLQUFLO01BSlksR0FLbEIsSUFBQyxDQUFBLFFBTGlCO01BT3JCLElBQUcsSUFBQyxDQUFBLFFBQVEsQ0FBQyxHQUFiO1FBQ0ksR0FBRyxDQUFDLElBQUksUUFBQSxDQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsSUFBQTs7VUFDSixJQUFLLENBQUEsQ0FBQSxDQUFFLEdBQUcsQ0FBQyxNQUFNLENBQUM7VUFDbEIsSUFBRyxJQUFLLENBQUEsR0FBQSxDQUFjLFdBQXRCO1lBQTRCLElBQUcsU0FBVSxDQUFBLENBQUEsQ0FBRSxHQUFHLENBQUMsT0FBTyxDQUFDLGlCQUFELENBQTFCO2NBQW1ELElBQUssQ0FBQSxDQUFBLENBQUU7OztVQUN0RixHQUFHLENBQUMsVUFBVyxDQUFBLENBQUEsQ0FBRTtZQUFFLE1BQU0sQ0FBRSxLQUFNLENBQUEsQ0FBQSxDQUFFLElBQVY7VUFBUjtVQUNqQixLQUFDLENBQUEsR0FBRyxDQUFDLElBQUksR0FBRyxDQUFDLFdBQVksQ0FBQSxDQUFBLENBQU0sSUFBQyxDQUFBLENBQUEsQ0FBRSxHQUFHLENBQUMsT0FBTyxDQUFDLFlBQUQsQ0FBZSxDQUFBLENBQUEsQ0FBSyxLQUFFO1lBQUUsS0FBSyxHQUFHLENBQUM7WUFBYSxJQUFJO1lBQU0sU0FBUyxHQUFHLENBQUM7WUFBUyxRQUFRLEdBQUcsQ0FBQztVQUFwRSxHQUE4RSxRQUFRLEdBQUcsQ0FBQyxRQUFhLEtBQUMsQ0FBQSxDQUFBLENBQUUsSUFBcEs7aUJBRVQsS0FBSTtTQU5BOztNQVFaLElBQUcsSUFBQyxDQUFBLFFBQVEsQ0FBQyxTQUFiO1FBQTRCLElBQUMsQ0FBQSxRQUFRLENBQUMsVUFBVSxHQUFBO09BQ2hEO1FBQ0ksR0FBRyxDQUFDLE9BQU8sT0FBTyxTQUFQO1FBQ1gsR0FBRyxDQUFDLElBQUksZUFBZSxLQUFmO1FBQ1IsR0FBRyxDQUFDLElBQUksU0FBUyxJQUFDLENBQUEsUUFBUSxDQUFDLEtBQW5CO1FBQ1IsR0FBRyxDQUFDLElBQUksZ0JBQWdCLEtBQWhCO1FBQ1IsR0FBRyxDQUFDLElBQUksT0FBTyxDQUFDLFFBQUQsRUFBUSxJQUFDLENBQUEsUUFBUSxDQUFDLFFBQUQsR0FDNUI7VUFBQSxPQUFPO1VBQ1AsVUFBVTtVQUNWLE1BQU07VUFDTixVQUFVO1FBSFYsQ0FEbUIsQ0FBZjs7TUFPWixJQUFDLENBQUEsR0FBRyxDQUFDLElBQUssQ0FBQSxDQUFBLENBQUUsSUFBSSxDQUFDLGFBQWEsSUFBQyxDQUFBLEdBQUcsQ0FBQyxHQUFMO01BQzlCLElBQUMsQ0FBQSxHQUFHLENBQUMsSUFBSSxDQUFDLE9BQU8sSUFBQyxDQUFBLFFBQVEsQ0FBQyxJQUFWO01BQ2pCLElBQUMsQ0FBQSxHQUFHLENBQUMsSUFBSSx1QkFBd0IsQ0FBQSxDQUFBLENBQUUsTUFBTSxDQUFDLEtBQVQsQ0FBZSxJQUFDLENBQUEsUUFBUSxDQUFDLElBQVgsR0FBa0IsSUFBSSxRQUFPLElBQW5FO2FBRVQsU0FBUTs7RUFyQ1osQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbIiNhdXRvY29tcGlsZVxuYmFja2JvbmUgPSByZXF1aXJlICdiYWNrYm9uZTQwMDAnXG5odHRwID0gcmVxdWlyZSAnaHR0cCdcbmV4cHJlc3MgPSByZXF1aXJlICdleHByZXNzJ1xuZWpzbG9jYWxzID0gcmVxdWlyZSAnZWpzLWxvY2FscydcbmggPSByZXF1aXJlICdoZWxwZXJzJ1xuXyA9IHJlcXVpcmUgJ3VuZGVyc2NvcmUnXG51dGlsID0gcmVxdWlyZSAndXRpbCdcbmNvbG9ycyA9IHJlcXVpcmUgJ2NvbG9ycydcblxuZXhwb3J0cy5sZWdvID0gYmFja2JvbmUuTW9kZWwuZXh0ZW5kNDAwMCBkb1xuICAgIHJlcXVpcmVzOiBbICdsb2dnZXInIF1cbiAgICBhZnRlcjogWyAnZGInIF1cbiAgICBpbml0OiAoY2FsbGJhY2spIC0+XG4gICAgICAgIEBlbnYuYXBwID0gYXBwID0gZXhwcmVzcygpXG4gICAgICAgIEBzZXR0aW5ncyA9IF8uZXh0ZW5kIHtcbiAgICAgICAgICAgIHN0YXRpYzogaC5wYXRoKEBlbnYucm9vdCwgJ3N0YXRpYycpXG4gICAgICAgICAgICB2aWV3czogaC5wYXRoKEBlbnYucm9vdCwgJ2VqcycpXG4gICAgICAgICAgICBwb3J0OiA4MFxuICAgICAgICAgICAgbG9nOiB0cnVlXG4gICAgICAgIH0sIEBzZXR0aW5nc1xuXG4gICAgICAgIGlmIEBzZXR0aW5ncy5sb2dcbiAgICAgICAgICAgIGFwcC51c2UgKHJlcSwgcmVzLCBuZXh0KSB+PlxuICAgICAgICAgICAgICAgIGhvc3QgPSByZXEuc29ja2V0LnJlbW90ZUFkZHJlc3NcbiAgICAgICAgICAgICAgICBpZiBob3N0IGlzIFwiMTI3LjAuMC4xXCIgdGhlbiBpZiBmb3J3YXJkZWQgPSByZXEuaGVhZGVyc1sneC1mb3J3YXJkZWQtZm9yJ10gdGhlbiBob3N0ID0gZm9yd2FyZGVkXG4gICAgICAgICAgICAgICAgcmVxLmxvZ0NvbnRleHQgPSB7IHRhZ3M6IFsgJ2lwLScgKyBob3N0IF0gfVxuICAgICAgICAgICAgICAgIEBlbnYubG9nIHJlcS5vcmlnaW5hbFVybCArIFwiIFtcIiArIHJlcS5oZWFkZXJzWyd1c2VyLWFnZW50J10gKyBcIl1cIiwgeyB1cmw6IHJlcS5vcmlnaW5hbFVybCwgaXA6IGhvc3QsIGhlYWRlcnM6IHJlcS5oZWFkZXJzLCBtZXRob2Q6IHJlcS5tZXRob2QgfSwgJ2h0dHAnLCByZXEubWV0aG9kLCBcImlwLVwiICsgaG9zdFxuXG4gICAgICAgICAgICAgICAgbmV4dCgpXG5cbiAgICAgICAgaWYgQHNldHRpbmdzLmNvbmZpZ3VyZSB0aGVuIEBzZXR0aW5ncy5jb25maWd1cmUgYXBwXG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIGFwcC5lbmdpbmUgJ2VqcycsIGVqc2xvY2Fsc1xuICAgICAgICAgICAgYXBwLnNldCAndmlldyBlbmdpbmUnLCAnZWpzJ1xuICAgICAgICAgICAgYXBwLnNldCAndmlld3MnLCBAc2V0dGluZ3Mudmlld3NcbiAgICAgICAgICAgIGFwcC5zZXQgJ3gtcG93ZXJlZC1ieScsIGZhbHNlXG4gICAgICAgICAgICBhcHAudXNlIGV4cHJlc3Muc3RhdGljIEBzZXR0aW5ncy5zdGF0aWMsIGRvXG4gICAgICAgICAgICAgICAgaW5kZXg6IGZhbHNlXG4gICAgICAgICAgICAgICAgcmVkaXJlY3Q6IGZhbHNlXG4gICAgICAgICAgICAgICAgZXRhZzogZmFsc2VcbiAgICAgICAgICAgICAgICBkb3RmaWxlczogJ2lnbm9yZSdcblxuXG4gICAgICAgIEBlbnYuaHR0cCA9IGh0dHAuY3JlYXRlU2VydmVyIEBlbnYuYXBwXG4gICAgICAgIEBlbnYuaHR0cC5saXN0ZW4gQHNldHRpbmdzLnBvcnRcbiAgICAgICAgQGVudi5sb2cgJ2V4cHJlc3MgbGlzdGVuaW5nIGF0ICcgKyBjb2xvcnMuZ3JlZW4oQHNldHRpbmdzLnBvcnQpLCB7fSwgJ2luaXQnLCdvaydcblxuICAgICAgICBjYWxsYmFjaygpXG4iXX0=
